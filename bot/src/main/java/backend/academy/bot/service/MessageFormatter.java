package backend.academy.bot.service;

import backend.academy.bot.dto.LinkUpdate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import org.springframework.stereotype.Service;

@Service
public class MessageFormatter {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    public String formatUpdateMessage(LinkUpdate update) {
        if (update == null) {
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è";
        }

        String type = update.getType() != null ? update.getType() : "UNKNOWN";
        String title = update.getTitle() != null ? update.getTitle() : "Untitled";
        String username = update.getAuthor() != null ? update.getAuthor() : "Unknown";
        String time = update.getCreatedAt() != null ? update.getCreatedAt().format(DATE_FORMATTER) : "Unknown time";
        String description = update.getDescription() != null ? update.getDescription() : "";
        String url = update.getUrl() != null ? update.getUrl() : "";

        StringBuilder sb = new StringBuilder();

        switch (type) {
            case "ANSWER":
            case "COMMENT":
                sb.append("üîî *–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ StackOverflow*\n\n");
                sb.append("üìå *–¢–∏–ø:* ")
                        .append(type.equals("ANSWER") ? "–û—Ç–≤–µ—Ç" : "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                        .append("\n");
                sb.append("üìù *–í–æ–ø—Ä–æ—Å:* ").append(title).append("\n");
                sb.append("üë§ *–ê–≤—Ç–æ—Ä:* ").append(username).append("\n");
                sb.append("‚è∞ *–í—Ä–µ–º—è:* ").append(time).append("\n");
                if (description != null && !description.isEmpty()) {
                    sb.append("\nüìÑ *–ü—Ä–µ–≤—å—é:*\n").append(description);
                }
                sb.append("\n\nüîó ").append(url);
                break;

            case "STACKOVERFLOW_QUESTION":
                // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ StackOverflow –º—ã —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ StackoverflowService
                // –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –ø–æ–ª–µ description, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                return description;

            case "PULL_REQUEST":
            case "ISSUE":
                sb.append("üîî *–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ GitHub*\n\n");
                sb.append("üìå *–¢–∏–ø:* ")
                        .append(type.equals("PULL_REQUEST") ? "Pull Request" : "Issue")
                        .append("\n");
                sb.append("üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ").append(title).append("\n");
                sb.append("üë§ *–ê–≤—Ç–æ—Ä:* ").append(username).append("\n");
                sb.append("‚è∞ *–í—Ä–µ–º—è:* ").append(time).append("\n");
                if (description != null && !description.isEmpty()) {
                    sb.append("\nüìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n").append(description);
                }
                sb.append("\n\nüîó ").append(url);
                break;

            case "COMMIT":
                sb.append("üîî *–ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç –Ω–∞ GitHub*\n\n");
                sb.append("üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* ").append(title).append("\n");
                sb.append("üë§ *–ê–≤—Ç–æ—Ä:* ").append(username).append("\n");
                sb.append("‚è∞ *–í—Ä–µ–º—è:* ").append(time).append("\n");
                if (description != null && !description.isEmpty()) {
                    sb.append("\nüìÑ *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n").append(description);
                }
                sb.append("\n\nüîó ").append(url);
                break;

            case "REPOSITORY":
                sb.append("üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub*\n\n");
                sb.append("üìù *–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* ").append(title).append("\n");
                sb.append("üë§ *–í–ª–∞–¥–µ–ª–µ—Ü:* ").append(username).append("\n");
                sb.append("‚è∞ *–í—Ä–µ–º—è:* ").append(time).append("\n");
                if (description != null && !description.isEmpty()) {
                    sb.append("\nüìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n").append(description);
                }
                sb.append("\n\nüîó ").append(url);
                break;

            default:
                return String.format("%s||%s||%s||%s||%s||%s", type, title, username, time, description, url);
        }

        return sb.toString();
    }

    public String formatUpdateMessage(String rawMessage) {
        if (rawMessage == null || rawMessage.isEmpty()) {
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è";
        }

        String[] parts = rawMessage.split("\\|\\|");
        if (parts.length < 6) {
            return rawMessage;
        }

        LinkUpdate update = new LinkUpdate();
        update.setType(parts[0]);
        update.setTitle(parts[1]);
        update.setAuthor(parts[2]);
        try {
            update.setCreatedAt(OffsetDateTime.parse(parts[3]));
        } catch (Exception e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º null
            update.setCreatedAt(null);
        }
        update.setDescription(parts[4]);
        update.setUrl(parts[5]);

        return formatUpdateMessage(update);
    }
}
